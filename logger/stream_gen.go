package logger

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StatGroup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Fatal":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Fatal")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Fatal")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Fatal.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Fatal", "Bytes")
						return
					}
				case "Times":
					z.Fatal.Times, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Fatal", "Times")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Fatal")
						return
					}
				}
			}
		case "Error":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Error.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Error", "Bytes")
						return
					}
				case "Times":
					z.Error.Times, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Error", "Times")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Error")
						return
					}
				}
			}
		case "Alert":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Alert")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Alert")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Alert.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Alert", "Bytes")
						return
					}
				case "Times":
					z.Alert.Times, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Alert", "Times")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Alert")
						return
					}
				}
			}
		case "Vital":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Vital")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Vital")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Vital.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Vital", "Bytes")
						return
					}
				case "Times":
					z.Vital.Times, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Vital", "Times")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Vital")
						return
					}
				}
			}
		case "Debug":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Debug")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Debug")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Debug.Bytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Debug", "Bytes")
						return
					}
				case "Times":
					z.Debug.Times, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Debug", "Times")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Debug")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StatGroup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Fatal"
	err = en.Append(0x85, 0xa5, 0x46, 0x61, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Fatal.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Fatal", "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Fatal.Times)
	if err != nil {
		err = msgp.WrapError(err, "Fatal", "Times")
		return
	}
	// write "Error"
	err = en.Append(0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Error.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Error", "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Error.Times)
	if err != nil {
		err = msgp.WrapError(err, "Error", "Times")
		return
	}
	// write "Alert"
	err = en.Append(0xa5, 0x41, 0x6c, 0x65, 0x72, 0x74)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Alert.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Alert", "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Alert.Times)
	if err != nil {
		err = msgp.WrapError(err, "Alert", "Times")
		return
	}
	// write "Vital"
	err = en.Append(0xa5, 0x56, 0x69, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Vital.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Vital", "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Vital.Times)
	if err != nil {
		err = msgp.WrapError(err, "Vital", "Times")
		return
	}
	// write "Debug"
	err = en.Append(0xa5, 0x44, 0x65, 0x62, 0x75, 0x67)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Debug.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Debug", "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Debug.Times)
	if err != nil {
		err = msgp.WrapError(err, "Debug", "Times")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StatGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Fatal"
	o = append(o, 0x85, 0xa5, 0x46, 0x61, 0x74, 0x61, 0x6c)
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Fatal.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Fatal.Times)
	// string "Error"
	o = append(o, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Error.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Error.Times)
	// string "Alert"
	o = append(o, 0xa5, 0x41, 0x6c, 0x65, 0x72, 0x74)
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Alert.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Alert.Times)
	// string "Vital"
	o = append(o, 0xa5, 0x56, 0x69, 0x74, 0x61, 0x6c)
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Vital.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Vital.Times)
	// string "Debug"
	o = append(o, 0xa5, 0x44, 0x65, 0x62, 0x75, 0x67)
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Debug.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Debug.Times)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StatGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Fatal":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fatal")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fatal")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Fatal.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fatal", "Bytes")
						return
					}
				case "Times":
					z.Fatal.Times, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fatal", "Times")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fatal")
						return
					}
				}
			}
		case "Error":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Error.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Error", "Bytes")
						return
					}
				case "Times":
					z.Error.Times, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Error", "Times")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Error")
						return
					}
				}
			}
		case "Alert":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alert")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Alert")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Alert.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Alert", "Bytes")
						return
					}
				case "Times":
					z.Alert.Times, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Alert", "Times")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Alert")
						return
					}
				}
			}
		case "Vital":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Vital")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Vital")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Vital.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Vital", "Bytes")
						return
					}
				case "Times":
					z.Vital.Times, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Vital", "Times")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Vital")
						return
					}
				}
			}
		case "Debug":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Debug")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Debug")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Bytes":
					z.Debug.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Debug", "Bytes")
						return
					}
				case "Times":
					z.Debug.Times, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Debug", "Times")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Debug")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StatGroup) Msgsize() (s int) {
	s = 1 + 6 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size + 6 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size + 6 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size + 6 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size + 6 + 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Stats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Bytes":
			z.Bytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Bytes")
				return
			}
		case "Times":
			z.Times, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Times")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Stats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Bytes"
	err = en.Append(0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Bytes)
	if err != nil {
		err = msgp.WrapError(err, "Bytes")
		return
	}
	// write "Times"
	err = en.Append(0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Times)
	if err != nil {
		err = msgp.WrapError(err, "Times")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Stats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Bytes"
	o = append(o, 0x82, 0xa5, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Bytes)
	// string "Times"
	o = append(o, 0xa5, 0x54, 0x69, 0x6d, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.Times)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Stats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Bytes":
			z.Bytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bytes")
				return
			}
		case "Times":
			z.Times, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Times")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Stats) Msgsize() (s int) {
	s = 1 + 6 + msgp.Int64Size + 6 + msgp.Int64Size
	return
}
